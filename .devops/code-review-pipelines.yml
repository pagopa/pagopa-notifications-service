# Azure DevOps pipeline to build, check source codes and run tests.
# To make Danger JS run on a pull request you need to add the following pipeline 
# variable and set it with a GitHub access token (scope public_repo); otherwise 
# set its value to 'skip' without marking it secret: 
# - DANGER_GITHUB_API_TOKEN
variables:
  BRANCH_NAME: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger: none

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: 'io-azure-devops-github-ro'

    - repository: pagopaEcommerceLocal
      type: github
      name: pagopa/pagopa-ecommerce-local
      ref: CHK-1871-notification-collection-tests
      endpoint: 'io-azure-devops-github-ro'

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: make_build
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - bash: |
              yarn generate && yarn build
            displayName: 'Build'
  - stage: Static_analysis
    dependsOn: []
    jobs:
      - job: lint
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - bash: |
              yarn lint
            displayName: 'Lint'
      - job: danger
        condition: 
          and(
            succeeded(),
            ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
          )
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'
  
  - stage: Test
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - bash: |
              npm i -g azure-functions-core-tools@3 --unsafe-perm true
            displayName: 'Install azure functions core tools'
          - bash: |
              cp .env.example .env
            displayName: 'Setup env for test'
          - script: cp .env.example .env
          - bash: |
              yarn generate && yarn build && yarn test
            displayName: 'Unit tests exec'
          - bash: |
              bash <(curl -s https://codecov.io/bash)
            displayName: 'Code coverage'
  
  - stage: IntegrationTest
    dependsOn: [ ]
    jobs:
      - job: make_integration_test
        steps:
          - checkout: pagopaEcommerceLocal
          - script: |
              echo "##[debug] Change placeholder for notification-service set branch: $(BRANCH_NAME)"
              sed -i "s/^NOTIFICATIONS_SERVICE_COMMIT_SHA=.*$/NOTIFICATIONS_SERVICE_COMMIT_SHA=$(BRANCH_NAME)/" .env
            displayName: 'Change notification branch name ecommerce-local .env'
          - script: docker compose up pagopa-notifications-service pagopa-pdv-mock storage azurite-init -d
            displayName: 'Run app with docker-compose'
          - script: |
              timeout 180 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8086/)" != "304" ]]; do sleep 5; done' || exit 1
            displayName: 'Health check'
          - script: yarn global add newman
            displayName: 'newman installation'
          - script: newman run api-tests/notification-service/notification-service_ecommerce_local.postman_collection.json --environment=api-tests/notification-service/notification-service_ecommerce_local.postman_environment.json --reporters cli,junit --reporter-junit-export Results/checkout-api-TEST.xml
            displayName: 'Run api test'
            continueOnError: false
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'

