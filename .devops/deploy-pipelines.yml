# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'skipBuild'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: false
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT then PROD environments'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: "SKIP_RELEASE"
    displayName: "Skip release"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True    
resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

variables:
  dockerfileRelativePath: 'Dockerfile'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: 'Build_DEV'
    displayName: 'Build_and_Publish_docker_acr_DEV'
    condition: and(succeeded(), not(${{ parameters.skipBuild }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
  - stage: 'Deploy_DEV'
    displayName: 'Deply_helm_DEV'
    condition: or(succeeded(), ${{ parameters.skipBuild }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(Build.SourceVersion)
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: shared
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    DEPLOY_VERSION: $(Build.SourceVersion)
                    
  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch main
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    dependsOn: []
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/CHK-612-pipeline-uat'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    jobs:
      - job: branch_version
        steps:
          - template: templates/node-github-current-version/template.yaml@pagopaCommons
      - job: make_release
        steps:
          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
            - template: templates/node-job-setup/template.yaml@pagopaCommons
              parameters:
                persistCredentials: true
            - template: azure-templates/node-github-release.yml
              parameters:
                semver: '${{ parameters.RELEASE_SEMVER }}'
                gitEmail: $(GIT_EMAIL)
                gitUsername: $(GIT_USERNAME)
                gitHubConnection: $(GITHUB_CONNECTION)
                release_branch: CHK-612-pipeline-uat

          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
            - template: templates/node-github-current-version/template.yaml@pagopaCommons
      - job: tag_version
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
        steps:
          - template: templates/node-github-current-version/template.yaml@pagopaCommons

  - stage: 'Build_UAT_PROD'
    displayName: 'Build_and_Publish_to_UAT'
    condition: and(succeeded(), not(${{ parameters.skipBuild }}), eq(${{parameters.UAT_PROD_DEPLOY}}, true))
    variables:
      next_version: $[ stageDependencies.Release.make_release.outputs['next_version.value'] ]
      current_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
      current_version_branch: $[ stageDependencies.Release.branch_version.outputs['current_version.value'] ]
      current_version_tag: $[ stageDependencies.Release.tag_version.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        steps:
          - template: templates/deploy-release-decision/template.yaml@pagopaCommons
            parameters:
              NEXT_VERSION: $(next_version)
              CURRENT_VERSION: $(current_version)
              CURRENT_VERSION_BRANCH: $(current_version_branch)
              CURRENT_VERSION_TAG: $(current_version_tag)
              BUILD_SOURCE_VERSION: $(Build.SourceVersion)
              BUILD_SOURCE_BRANCH_NAME: $(Build.SourceBranchName)
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(deploy_version_decision.value)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
          - script: |
              version=$(current_version_branch)
              echo "##vso[task.setvariable variable=value;isOutput=true]$version"
              HEAD_SHA=$(git rev-parse HEAD)
              TITLE="Release $CURRENT_VERSION_BTANCH"
              TAG="v$version-RELEASE"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"
            name: current_version
            displayName: 'Set current_version variables'    
  # Deploy
  - stage: "Deploy_UAT"
    dependsOn: "Build_UAT_PROD"
    variables:
      deploy_version: $[ stageDependencies.Build_UAT_PROD.build.outputs['deploy_version_decision.value'] ]
      current_version: $[ stageDependencies.Build_UAT_PROD.build.outputs['current_version.value'] ]
    jobs:
      - deployment: "deploy_bluegreen"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: shared
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    DEPLOY_VERSION: $(current_version)
                    BLUE_GREEN_VERSION: $(deploy_version)
      - job: BLUE_GREEN_WaitForApproval
        displayName: Wait for BLUE_GREEN approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'
      - deployment: "deploy"
        dependsOn: "BLUE_GREEN_WaitForApproval"
        pool:
          name: pagopa-uat-linux
        environment: UAT
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: shared
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    DEPLOY_VERSION: $(deploy_version)
