# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'skipBuild'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: false   
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
  - name: 'RELEASE_CHART_SEMVER'
    displayName: 'When upgrading helm chart, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch  
    default: minor
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True 
  - name: "SKIP_RELEASE"
    displayName: "Skip release"
    type: boolean
    default: False
    values:
      - False
      - True

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV'
    condition: and(succeeded(), not(${{ parameters.skipBuild }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.skipBuild }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)
                    
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: []
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
          - template: templates/node-github-current-version/template.yaml@pagopaCommons
        
  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: Build_release_candidate
    variables:
      green_version: $[ stageDependencies.Build_release_candidate.build.outputs['current_version.value'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(green_version)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    dependsOn: Deploy_UAT_Blue
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'
      - job: API_tests
        displayName: API test for blue deploy approval
        steps:
          - script: |
              sleep 60
            displayName: 'Waiting App running'
          - script: |
              yarn global add newman
            displayName: 'newman installation'
          - script: |
              newman run tests/api-tests/notifications-service.api.tests.json --environment=tests/api-tests/dev.env.json --env-var=NOTIFICATIONS_SERVICE_TESTING_API_KEY=$(NOTIFICATIONS_SERVICE_TESTING_API_KEY) --env-var=MAIL=$(NOTIFICATIONS_SERVICE_TESTING_MAIL) --reporters cli,junit --reporter-junit-export Results/api-TEST.xml     
            displayName: 'Run api test on blue app'
            continueOnError: true 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml' 
              searchFolder: '$(System.DefaultWorkingDirectory)'          

  - stage: Release
    dependsOn: Bluegreen_WaitForApproval
    jobs:
      - job: make_release
        steps:
          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
            - template: templates/node-job-setup/template.yaml@pagopaCommons
              parameters:
                persistCredentials: true
            - template: azure-templates/node-github-release.yml
              parameters:
                semver: '${{ parameters.RELEASE_SEMVER }}'
                gitEmail: $(GIT_EMAIL)
                gitUsername: $(GIT_USERNAME)
                gitHubConnection: $(GITHUB_CONNECTION)
                release_branch: main
                release_chart_semver: '${{ parameters.RELEASE_CHART_SEMVER }}'
          - ${{ if eq(parameters['SKIP_RELEASE'], False) }}:
            - template: templates/node-github-current-version/template.yaml@pagopaCommons
      - job: tag_version
        steps:
          - template: templates/node-github-current-version/template.yaml@pagopaCommons

  - stage: "Release_tag_docker"
    displayName: 'Docker tag release'
    dependsOn: Release
    variables:
      next_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
        - task: Docker@2
          displayName: "docker login"
          inputs:
            containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
            command: "login"
        - task: Bash@3
          displayName: "docker tag new version"
          inputs:
            targetType: "inline"
            script: |
              docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)
              docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion) $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(next_version)
              docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(next_version)

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [Release_tag_docker,Release]
    variables:
      green_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(green_version)