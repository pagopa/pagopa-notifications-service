# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
      - none
    default: patch
  - name: 'RELEASE_CHART_SEMVER'
    displayName: 'When upgrading helm chart, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch  
    default: patch
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True 
  - name: "SKIP_RELEASE"
    displayName: "Skip release"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True    
resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

# --- START Deploy DEV --- # 
stages:

# --- START Deploy UAT --- # 
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: []
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/CHK-3991-canary-deployment-test-pipeline'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
       )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
          - template: azure-templates/chart-current-version.yml
        
  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: Build_release_candidate
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_SKIP_BLUE_DEPLOYMENT}}, False)
      )
    variables:
      green_app_version: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)-blue
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(green_app_version)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    dependsOn: Deploy_UAT_Blue
    variables:
      commitUrl: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.commitUrl'] ]
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
            instructions: "Please approve or reject UAT blue green promotions for $(commitUrl)"
            onTimeout: 'reject'
      - job: API_tests
        displayName: API test for blue deploy approval
        steps:
          - script: |
              sleep 60
            displayName: 'Waiting App running'
          - script: |
              yarn global add newman
            displayName: 'newman installation'
          - script: |
              newman run tests/api-tests/notifications-service.api.tests.uat-beta.json --environment=tests/api-tests/uat-beta.env.json --env-var=NOTIFICATIONS_SERVICE_TESTING_API_KEY=$(NOTIFICATIONS_SERVICE_TESTING_API_KEY_UAT) --env-var=NOTIFICATIONS_SERVICE_TESTING_MAIL=$(NOTIFICATIONS_SERVICE_TESTING_MAIL_UAT) --env-var=NOTIFICATIONS_SERVICE_TESTING_SUBJECT=TEST_MAIL_UAT_BLUE --reporters cli,junit --reporter-junit-export Results/api-TEST.xml
            displayName: "Run api test on blue app"
            continueOnError: true 
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml' 
              searchFolder: '$(System.DefaultWorkingDirectory)'
  - stage: Release
    ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], True) }}:
      dependsOn: Build_release_candidate
    ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], False) }}:
      dependsOn: Bluegreen_WaitForApproval
      condition: succeeded()
    jobs:
      - job: make_release
        displayName: Make github release
        steps:
          - template: azure-templates/chart-current-version.yml

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Release
    condition:
      and(
        succeeded(),
        ne('${{parameters.RELEASE_SEMVER}}', 'none')
      )
    variables:
      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
        - task: Bash@3
          displayName: "docker tag new version"
          inputs:
            targetType: "inline"
            script: |
              echo "fake"

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [tag_docker_release,Release]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/CHK-3991-canary-deployment-test-pipeline'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags')
        )
      )
    variables:
      app_version: $[ stageDependencies.Release.make_release.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - ${{ if eq(parameters['UAT_SKIP_BLUE_DEPLOYMENT'], False) }}:
                  # uninstall helm release used for blue instance
                  - task: HelmDeploy@0
                    displayName: Un-install UAT blue version
                    continueOnError: false
                    inputs:
                      kubernetesServiceEndpoint: $(UAT_KUBERNETES_SERVICE_CONN)
                      namespace: "ecommerce"
                      command: uninstall
                      arguments: $(K8S_IMAGE_REPOSITORY_NAME)-blue
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)
# --- END Deploy UAT --- # 
