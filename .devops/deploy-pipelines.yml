# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'skipBuild'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: false
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT then PROD environments'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply (release is done automatically when deploying on UAT and skipped on DEV) '
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v19
      endpoint: 'io-azure-devops-github-ro'

variables:
  dockerfileRelativePath: 'Dockerfile'

  # Agent VM image name for Build

  vmImageNameDefault: 'ubuntu-latest'

  # Image Repository Name
  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  # settingsXmlROsecureFileName: '$(SETTINGS_XML_RO_SECURE_FILE_NAME)'

  ${{ if eq(parameters['UAT_DEPLOY'], true) }}:
  environment: 'UAT'
  dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
  kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
  containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
  helmValues: values-uat.yaml
  #selfHostedAgentPool: $(UAT_AGENT_POOL)

  ${{ if eq(parameters['UAT_PROD'], true) }}:
    environment: 'PROD'
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    helmValues: values-prod.yaml
    # selfHostedAgentPool: $(PROD_AGENT_POOL)

  ${{ else }}:
    environment: 'DEV'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    helmValues: values-dev.yaml
    # selfHostedAgentPool: $(DEV_AGENT_POOL)

stages:
  - stage: 'Build'
    displayName: 'Build_and_Publish_to_${{ variables.environment }}'
    condition: and(succeeded(), not(${{ parameters.skipBuild }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                $(Build.SourceVersion)
                latest
  - stage: 'Serving_helm'
    displayName: 'Serving_Helm'
    dependsOn: Build
    condition: or(succeeded(), ${{ parameters.skipBuild }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - job: Serving_helm
        displayName: Serving_helm
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/helm'
              artifact: 'helm'
              publishLocation: 'pipeline'
  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ variables.environment }}'
    dependsOn: "Serving_helm"
    condition: or(succeeded(), ${{ parameters.skipBuild }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy_to_${{ variables.environment }}'
        pool:
          vmImage: $(vmImageNameDefault)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true    
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: shared
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: $(K8S_IMAGE_REPOSITORY_NAME)
                    releaseName: $(K8S_IMAGE_REPOSITORY_NAME)
                    valueFile: "$(Pipeline.Workspace)/helm/$(helmValues)"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m0s"
                    
  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch main
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    dependsOn: []
    condition:
      and(
        succeeded(),
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/CHK-612-pipeline-uat'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/CHK-612-pipeline-uat') }}:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons 
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              release_branch: main

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/CHK-612-pipeline-uat') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  - stage: 'Build_UAT_PROD'
    displayName: 'Build_and_Publish_to_UAT'
    condition: and(succeeded(), not(${{ parameters.skipBuild }}), eq(${{parameters.UAT_DEPLOY}}, true))
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - script: |
               SERVICE_VERSION=$(node -p "require('./package.json').version")
               echo $SERVICE_VERSION
          - task: Docker@2
            displayName: 'Publish_image_to_${{ variables.environment }}'
            condition: succeeded()
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              Dockerfile: '$(Build.Repository.LocalPath)/$(dockerfileRelativePath)'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: |
                $(Build.BuildId)
                $(Build.SourceVersion)

                latest